syntax = "proto3";

package taskmanagement;

// Common response status for error handling
message Status {
  int32 code = 1;
  string message = 2;
}

// Authentication Service
service AuthService {
  // Login and get JWT token
  rpc Login(LoginRequest) returns (LoginResponse);
  
  // Logout (delete session)
  rpc Logout(LogoutRequest) returns (LogoutResponse);
}

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string token = 1;
  Status status = 2;
}

message LogoutRequest {
  string token = 1;
}

message LogoutResponse {
  // Empty response to match REST API behavior (204 No Content)
}

// User Service
service UserService {
  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (UserResponse);
  
  // Get all users
  rpc GetUsers(GetUsersRequest) returns (GetUsersResponse);
  
  // Get user by ID
  rpc GetUser(GetUserRequest) returns (UserResponse);
  
  // Delete user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
  
  // Update user
  rpc UpdateUser(UpdateUserRequest) returns (UserResponse);
}

message User {
  int32 id = 1;
  string username = 2;
  string created_at = 3;
  string updated_at = 4;
  // Password is not included in responses
}

message CreateUserRequest {
  string email = 1;
  string password = 2;
}

message GetUsersRequest {
  // Optional pagination parameters
  int32 page = 1;
  int32 limit = 2;
}

message GetUsersResponse {
  repeated User users = 1;
  Status status = 2;
}

message GetUserRequest {
  int32 userId = 1;           // REST uses id as number
}

message DeleteUserRequest {
  int32 userId = 1;           // REST uses id as number
}

message DeleteUserResponse {
  Status status = 1;
}

message UpdateUserRequest {
  int32 userId = 1;           // REST uses id as number
  optional string password = 2; // REST primarily supports password updates
}

message UserResponse {
  User user = 1;
  Status status = 2;
}

// Task Service
service TaskService {
  // Get all tasks
  rpc GetTasks(GetTasksRequest) returns (GetTasksResponse);
  
  // Create a new task
  rpc CreateTask(CreateTaskRequest) returns (CreateTaskResponse);
  
  // Delete a task
  rpc DeleteTask(DeleteTaskRequest) returns (DeleteTaskResponse);
  
  // Update a task
  rpc UpdateTask(UpdateTaskRequest) returns (TaskResponse);
}

message Task {
  int32 id = 1;               // REST uses id (number), not string
  string title = 2;
  string description = 3;
  string status = 4;
  int32 user_id = 5;          // REST uses user_id (snake_case), number
  string created_at = 6;
  string updated_at = 7;
}

message GetTasksRequest {
  // Optional filters
  optional int32 user_id = 1;  // REST uses user_id (snake_case), number
  optional string status = 2;
  // Pagination
  int32 page = 3;
  int32 limit = 4;
}

message GetTasksResponse {
  repeated Task tasks = 1;
  int32 page = 2;    // Match REST API response structure
  int32 limit = 3;   // Match REST API response structure
  int32 total = 4;   // Match REST API response structure
  Status status = 5;
}

message CreateTaskRequest {
  string title = 1;
  string description = 2;
  string status = 3;
  int32 user_id = 4;          // REST uses user_id (snake_case), number
}

message CreateTaskResponse {
  bool success = 1;
  string message = 2;
  int32 taskId = 3;           // REST API returns taskId as number
  string title = 4;
  string description = 5;
  string status = 6;
  Status status_info = 7;     // For gRPC status info
}

message DeleteTaskRequest {
  int32 taskId = 1;           // REST uses id as number
}

message DeleteTaskResponse {
  Status status = 1;
}

message UpdateTaskRequest {
  int32 taskId = 1;           // REST uses id as number
  optional string title = 2;
  optional string description = 3;
  optional string status = 4;
  optional int32 user_id = 5; // REST uses user_id (snake_case), number
}

message TaskResponse {
  Task task = 1;
  Status status = 2;
}
